generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CONSISTENT ARCHITECTURE: Nama SAMA PERFECT antara Prisma model dan database table

model Section {
  id           String   @id @default(cuid())
  title        String   @db.VarChar(500)
  content      String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  tags         Json     @default("{}")
  metadata     Json     @default("{}")
  created_by   String?  @default("system") @db.VarChar(200)
  updated_by   String?  @default("system") @db.VarChar(200)
  request_id   String?  @db.VarChar(100)
  content_hash String?  @db.VarChar(128)

  @@map("Section")
}

model AdrDecision {
  id                     String    @id @default(cuid())
  component              String    @db.VarChar(200)
  status                 String    @db.VarChar(50)
  title                  String    @db.VarChar(500)
  rationale              String
  alternativesConsidered String[]
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  tags                   Json      @default("{}")
  metadata               Json      @default("{}")
  created_by             String?   @default("system") @db.VarChar(200)
  updated_by             String?   @default("system") @db.VarChar(200)
  request_id             String?   @db.VarChar(100)
  content_hash           String?   @db.VarChar(128)
  accepted_at            DateTime? @db.Timestamptz(6)
  accepted_by            String?   @db.VarChar(200)

  @@index([updated_at(sort: Desc), created_at], map: "idx_AdrDecision_updated_at_desc")
  @@map("AdrDecision")
}

model IssueLog {
  id           String   @id @default(cuid())
  title        String   @db.VarChar(500)
  description  String?
  status       String   @db.VarChar(50)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  tags         Json     @default("{}")
  metadata     Json     @default("{}")
  created_by   String?  @default("system") @db.VarChar(200)
  updated_by   String?  @default("system") @db.VarChar(200)
  request_id   String?  @db.VarChar(100)
  content_hash String?  @db.VarChar(128)

  @@index([updated_at(sort: Desc), created_at], map: "idx_IssueLog_updated_at_desc")
  @@map("IssueLog")
}

model TodoLog {
  id           String    @id @default(cuid())
  title        String    @db.VarChar(500)
  description  String?
  status       String    @db.VarChar(50)
  priority     String?   @db.VarChar(50)
  due_date     DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  tags         Json      @default("{}")
  metadata     Json      @default("{}")
  closed_at    DateTime?
  created_by   String?   @default("system") @db.VarChar(200)
  updated_by   String?   @default("system") @db.VarChar(200)
  request_id   String?   @db.VarChar(100)
  content_hash String?   @db.VarChar(128)
  completed_at DateTime? @db.Timestamptz(6)
  completed_by String?   @db.VarChar(200)

  @@index([updated_at(sort: Desc), created_at], map: "idx_TodoLog_updated_at_desc")
  @@map("TodoLog")
}

model Runbook {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(500)
  description String?
  steps       Json     @default("[]")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  tags        Json     @default("{}")
  metadata    Json     @default("{}")
  created_by  String?  @default("system") @db.VarChar(200)
  updated_by  String?  @default("system") @db.VarChar(200)
  request_id  String?  @db.VarChar(100)
  content_hash String? @db.VarChar(128)

  @@map("Runbook")
}

model ChangeLog {
  id          String   @id @default(cuid())
  change_type String   @db.VarChar(100)
  subject_ref String   @db.VarChar(200)
  summary     String
  author      String   @db.VarChar(200)
  commit_sha  String?  @db.VarChar(100)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  tags        Json     @default("{}")
  metadata    Json     @default("{}")
  created_by  String?  @default("system") @db.VarChar(200)
  updated_by  String?  @default("system") @db.VarChar(200)
  request_id  String?  @db.VarChar(100)
  content_hash String? @db.VarChar(128)

  @@map("ChangeLog")
}

model ReleaseNote {
  id          String   @id @default(cuid())
  version     String   @db.VarChar(100)
  summary     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  tags        Json     @default("{}")
  metadata    Json     @default("{}")
  created_by  String?  @default("system") @db.VarChar(200)
  updated_by  String?  @default("system") @db.VarChar(200)
  request_id  String?  @db.VarChar(100)
  content_hash String? @db.VarChar(128)

  @@map("ReleaseNote")
}

model DdlHistory {
  id          String   @id @default(cuid())
  migration_id String  @db.VarChar(200)
  ddl_text    String
  checksum    String   @db.VarChar(64)
  applied_at  DateTime @default(now())
  description String?
  status      String   @default("applied") @db.VarChar(20)
  tags        Json     @default("{}")
  metadata    Json     @default("{}")
  created_by  String?  @default("system") @db.VarChar(200)
  updated_by  String?  @default("system") @db.VarChar(200)
  request_id  String?  @db.VarChar(100)
  content_hash String? @db.VarChar(128)

  @@map("DdlHistory")
}

model PrContext {
  id          String    @id @default(cuid())
  pr_number   Int
  title       String    @db.VarChar(500)
  description String?
  author      String    @db.VarChar(200)
  status      String    @default("open") @db.VarChar(50)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  tags        Json      @default("{}")
  metadata    Json      @default("{}")
  merged_at   DateTime?
  created_by  String?   @default("system") @db.VarChar(200)
  updated_by  String?   @default("system") @db.VarChar(200)
  request_id  String?   @db.VarChar(100)
  content_hash String?  @db.VarChar(128)

  @@map("PrContext")
}

model KnowledgeEntity {
  id          String    @id @default(cuid())
  entity_type String    @db.VarChar(100)
  name        String    @db.VarChar(500)
  data        Json      @default("{}")
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  tags        Json      @default("{}")
  metadata    Json      @default("{}")
  deleted_at  DateTime?
  created_by  String?   @default("system") @db.VarChar(200)
  updated_by  String?   @default("system") @db.VarChar(200)
  request_id  String?   @db.VarChar(100)
  content_hash String?  @db.VarChar(128)

  @@map("KnowledgeEntity")
}

model KnowledgeRelation {
  id               String    @id @default(cuid())
  from_entity_type String    @db.VarChar(100)
  from_entity_id   String
  to_entity_type   String    @db.VarChar(100)
  to_entity_id     String
  relation_type    String    @db.VarChar(100)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  tags             Json      @default("{}")
  metadata         Json      @default("{}")
  deleted_at       DateTime?
  created_by       String?   @default("system") @db.VarChar(200)
  updated_by       String?   @default("system") @db.VarChar(200)
  request_id       String?   @db.VarChar(100)
  content_hash     String?  @db.VarChar(128)

  @@map("KnowledgeRelation")
}

model KnowledgeObservation {
  id          String    @id @default(cuid())
  entity_type String    @db.VarChar(100)
  entity_id   String
  observation String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  tags        Json      @default("{}")
  metadata    Json      @default("{}")
  deleted_at  DateTime?
  created_by  String?   @default("system") @db.VarChar(200)
  updated_by  String?   @default("system") @db.VarChar(200)
  request_id  String?   @db.VarChar(100)
  content_hash String?  @db.VarChar(128)

  @@map("KnowledgeObservation")
}

model IncidentLog {
  id               String   @id @default(cuid())
  title            String   @db.VarChar(500)
  severity         String   @db.VarChar(20)
  impact           String
  resolution_status String  @default("open") @db.VarChar(50)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  tags             Json     @default("{}")
  metadata         Json     @default("{}")
  created_by       String?  @default("system") @db.VarChar(200)
  updated_by       String?  @default("system") @db.VarChar(200)
  request_id       String?  @db.VarChar(100)
  content_hash     String?  @db.VarChar(128)
  detected_at      DateTime? @db.Timestamptz(6)
  timeline         Json?     @default("[]")
  root_cause_analysis String?
  resolution       String?

  @@map("IncidentLog")
}

model ReleaseLog {
  id          String   @id @default(cuid())
  version     String   @db.VarChar(100)
  release_type String  @db.VarChar(50)
  scope       String
  status      String   @default("planned") @db.VarChar(50)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  tags        Json     @default("{}")
  metadata    Json     @default("{}")
  created_by  String?  @default("system") @db.VarChar(200)
  updated_by  String?  @default("system") @db.VarChar(200)
  request_id  String?  @db.VarChar(100)
  content_hash String?  @db.VarChar(128)
  deployment_date DateTime? @db.Timestamptz(6)
  rollback_plan String?

  @@map("ReleaseLog")
}

model RiskLog {
  id                  String   @id @default(cuid())
  title               String   @db.VarChar(500)
  category            String   @db.VarChar(50)
  risk_level          String   @db.VarChar(20)
  impact_description  String
  probability         Decimal? @db.Decimal(3, 2) @default(0.5)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  tags                Json     @default("{}")
  metadata            Json     @default("{}")
  status              String   @default("open") @db.VarChar(50)
  created_by          String?  @default("system") @db.VarChar(200)
  updated_by          String?  @default("system") @db.VarChar(200)
  request_id          String?  @db.VarChar(100)
  content_hash        String?  @db.VarChar(128)
  mitigation_strategies Json?  @default("[]")

  @@map("RiskLog")
}

model AssumptionLog {
  id               String   @id @default(cuid())
  title            String   @db.VarChar(500)
  description      String
  category         String   @db.VarChar(50)
  validation_status String  @default("assumed") @db.VarChar(50)
  impact_if_invalid String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  tags             Json     @default("{}")
  metadata         Json     @default("{}")
  created_by       String?  @default("system") @db.VarChar(200)
  updated_by       String?  @default("system") @db.VarChar(200)
  request_id       String?  @db.VarChar(100)
  content_hash     String?  @db.VarChar(128)
  dependencies     Json?     @default("[]")

  @@map("AssumptionLog")
}

model PurgeMetadata {
  id                   Int      @id @unique @default(1)
  last_purge_at        DateTime @default(now())
  operations_since_purge Int     @default(0)
  time_threshold_hours Int      @default(24)
  operation_threshold  Int      @default(1000)
  deleted_counts       Json     @default("{}")
  last_duration_ms     Int?
  enabled              Boolean  @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("PurgeMetadata")
}

model EventAudit {
  id          String   @id @default(cuid())
  event_type  String   @db.VarChar(100)
  table_name  String   @db.VarChar(100)
  record_id   String   @db.VarChar(500)
  operation   String   @db.VarChar(10)
  old_data    Json?
  new_data    Json?
  changed_by  String?  @db.VarChar(200)
  tags        Json     @default("{}")
  metadata    Json     @default("{}")
  created_at  DateTime @default(now())

  @@map("EventAudit")
}