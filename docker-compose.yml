version: '3.8'

services:
  postgres:
    image: postgres:18-alpine
    container_name: cortex-postgres
    environment:
      POSTGRES_DB: cortex_prod
      POSTGRES_USER: cortex
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cortex_secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5433:5432"  # Exposed for external MCP tool access (host:5433 -> container:5432)
    volumes:
      - cortex_data:/var/lib/postgresql/data
      - ./scripts/pg_hba.conf:/var/lib/postgresql/18/docker/pg_hba.conf
      - ./scripts/init-extensions.sql:/docker-entrypoint-initdb.d/01-extensions.sql
      - ./migrations/0001_initial_schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
      - ./migrations/0002_indexes.sql:/docker-entrypoint-initdb.d/03-indexes.sql
      - ./migrations/0003_triggers.sql:/docker-entrypoint-initdb.d/04-triggers.sql
      - ./migrations/004_add_graph_schema.sql:/docker-entrypoint-initdb.d/05-graph.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cortex -d cortex_prod"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - cortex_network
    restart: unless-stopped
    # WSL2 specific optimizations
    shm_size: 128m

  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: cortex-server
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://cortex:${DB_PASSWORD:-cortex_secure_password_change_me}@postgres:5432/cortex_prod
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NODE_ENV: production
      DB_POOL_MIN: ${DB_POOL_MIN:-2}
      DB_POOL_MAX: ${DB_POOL_MAX:-10}
      DB_IDLE_TIMEOUT_MS: ${DB_IDLE_TIMEOUT_MS:-30000}
      CORTEX_ORG: ${CORTEX_ORG:-}
      CORTEX_PROJECT: ${CORTEX_PROJECT:-cortex-memory}
      CORTEX_BRANCH: ${CORTEX_BRANCH:-main}
    volumes:
      - ./migrations:/app/migrations:ro
    networks:
      - cortex_network
    restart: unless-stopped
    stdin_open: true
    tty: true
    # WSL2 specific optimizations
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be fully ready...' &&
        until nc -z postgres 5432; do
          echo 'PostgreSQL is not ready, waiting 2 seconds...'
          sleep 2
        done &&
        echo 'PostgreSQL is ready! Starting MCP server...' &&
        node dist/index.js
      "

volumes:
  cortex_data:
    driver: local

networks:
  cortex_network:
    driver: bridge
