# =============================================================================
# CORTEX MEMORY MCP SERVER - ENVIRONMENT CONFIGURATION
# =============================================================================
# This file contains all configuration options for the Cortex Memory MCP server.
# Copy this file to .env and adjust the values for your environment.
# =============================================================================

# =============================================================================
# DATABASE TYPE SELECTION
# =============================================================================
# Choose your primary database backend: postgresql, qdrant, or hybrid
# postgresql = Use PostgreSQL for all operations (traditional)
# qdrant = Use Qdrant for all operations (vector-focused)
# hybrid = Use PostgreSQL for metadata + Qdrant for vectors (recommended)
DATABASE_TYPE=postgresql

# Enable migration mode for transitioning between databases
DATABASE_MIGRATION_MODE=false

# Enable fallback to secondary database if primary fails (hybrid mode only)
DATABASE_FALLBACK_ENABLED=true

# =============================================================================
# POSTGRESQL CONFIGURATION
# =============================================================================
# Database connection settings
DB_HOST=your_database_host
DB_PORT=your_database_port
DB_NAME=your_database_name
DB_USER=your_database_user
# DB_PASSWORD=  # Required in production - set a strong password

# Complete database URL (alternative to individual settings above)
# DATABASE_URL=your_database_connection_string_here  # Format: postgresql://user:password@host:port/database

# Connection pool settings
DB_POOL_MIN=2
DB_POOL_MAX=10
DB_POOL_IDLE_TIMEOUT=30000
DB_CONNECTION_TIMEOUT=10000
DB_RETRY_ATTEMPTS=3
DB_RETRY_DELAY=1000

# Legacy timeout settings (for backward compatibility)
DB_IDLE_TIMEOUT_MS=30000
DB_CONNECTION_TIMEOUT_MS=10000
DB_QUERY_TIMEOUT=30000
DB_STATEMENT_TIMEOUT=30000

# =============================================================================
# QDRANT CONFIGURATION
# =============================================================================
# Qdrant vector database settings (required for qdrant or hybrid modes)
# QDRANT_URL=http://localhost:6333
# QDRANT_API_KEY=  # Set your Qdrant API key if required
# QDRANT_TIMEOUT=30000
# QDRANT_COLLECTION_PREFIX=cortex

# =============================================================================
# VECTOR CONFIGURATION
# =============================================================================
# OpenAI API for vector embeddings (MANDATORY - system will not start without this)
# OPENAI_API_KEY=your_openai_api_key_here  # Required: Set your valid OpenAI API key

# ⚠️  CRITICAL REQUIREMENT ⚠️
# - OpenAI API key is MANDATORY for Cortex Memory MCP to function
# - No fallback embedding system is provided
# - System will exit immediately if OPENAI_API_KEY is not set or invalid
# - Ensure your OpenAI account has sufficient quota for embedding operations

# Vector settings
# VECTOR_SIZE=1536
# VECTOR_DISTANCE=Cosine
# EMBEDDING_MODEL=text-embedding-ada-002
# EMBEDDING_BATCH_SIZE=10

# =============================================================================
# MIGRATION CONFIGURATION
# =============================================================================
# Migration mode: pg-to-qdrant, qdrant-to-pg, sync, validate, cleanup
# MIGRATION_MODE=pg-to-qdrant

# Migration performance settings
# MIGRATION_BATCH_SIZE=1000
# MIGRATION_CONCURRENCY=2
# MIGRATION_DRY_RUN=true
# MIGRATION_PRESERVE_PG=true
# MIGRATION_VALIDATION_ENABLED=true
# MIGRATION_SKIP_VALIDATION=false
# MIGRATION_PROGRESS_FILE=./migration-progress.json

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# Environment: development, production, test
NODE_ENV=development

# Logging level: debug, info, warn, error
LOG_LEVEL=info

# Server port
# PORT=3000

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# JWT secret for authentication (minimum 32 characters, REQUIRED in production)
# JWT_SECRET=  # Required in production: Use a cryptographically secure random string

# Encryption key for sensitive data (minimum 32 characters, hex, REQUIRED in production)
# ENCRYPTION_KEY=  # Required in production: Use a cryptographically secure random string

# CORS origin for web interface
# CORS_ORIGIN=http://localhost:3000

# =============================================================================
# MCP SERVER CONFIGURATION
# =============================================================================
# MCP server identification
MCP_SERVER_NAME=cortex-memory
MCP_SERVER_VERSION=1.1.0

# Transport method
MCP_TRANSPORT=stdio

# Maximum batch size for operations
MCP_MAX_BATCH_SIZE=100

# =============================================================================
# SCOPE INFERENCE
# =============================================================================
# Project scope information (optional, falls back to git)
CORTEX_ORG=your_organization_name
CORTEX_PROJECT=your_project_name
CORTEX_BRANCH=your_main_branch_name

# =============================================================================
# FEATURE FLAGS
# =============================================================================
# Enable migration mode features
ENABLE_MIGRATION_MODE=false

# Enable health check endpoints
ENABLE_HEALTH_CHECKS=true

# Enable metrics collection
ENABLE_METRICS_COLLECTION=true

# Enable caching for better performance
ENABLE_CACHING=true

# Enable debug mode for development
ENABLE_DEBUG_MODE=false

# =============================================================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# =============================================================================

# -----------------------------------------------------------------------------
# DEVELOPMENT ENVIRONMENT (CURRENT SETTINGS)
# -----------------------------------------------------------------------------
# NODE_ENV=development
# DATABASE_TYPE=postgresql
# LOG_LEVEL=debug
# DB_POOL_MAX=10
# MIGRATION_DRY_RUN=true
# ENABLE_DEBUG_MODE=true
# ENABLE_CACHING=false

# -----------------------------------------------------------------------------
# PRODUCTION ENVIRONMENT
# -----------------------------------------------------------------------------
# NODE_ENV=production
# DATABASE_TYPE=hybrid
# LOG_LEVEL=info
# DB_POOL_MIN=5
# DB_POOL_MAX=20
# MIGRATION_DRY_RUN=false
# ENABLE_DEBUG_MODE=false
# ENABLE_CACHING=true
# ENABLE_METRICS_COLLECTION=true

# -----------------------------------------------------------------------------
# TEST ENVIRONMENT
# -----------------------------------------------------------------------------
# NODE_ENV=test
# DATABASE_TYPE=postgresql
# LOG_LEVEL=error
# DB_POOL_MIN=1
# DB_POOL_MAX=1
# MIGRATION_DRY_RUN=true
# ENABLE_DEBUG_MODE=false
# ENABLE_CACHING=false
# ENABLE_METRICS_COLLECTION=false

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
#
# 1. DATABASE TYPES:
#    - postgresql: Traditional relational database with full-text search
#    - qdrant: Vector database optimized for semantic search
#    - hybrid: PostgreSQL for metadata + Qdrant for vectors (recommended)
#
# 2. MIGRATION:
#    - Set DATABASE_MIGRATION_MODE=true to enable migration features
#    - Always test with MIGRATION_DRY_RUN=true first
#    - Use MIGRATION_PRESERVE_PG=true for safety during migration
#
# 3. VECTOR OPERATIONS:
#    - Required for qdrant and hybrid modes: OPENAI_API_KEY, QDRANT_URL
#    - VECTOR_SIZE must match your embedding model (1536 for ada-002)
#
# 4. PERFORMANCE:
#    - Increase DB_POOL_MAX for high-traffic applications
#    - Adjust batch sizes based on available memory
#    - Enable caching for better performance
#
# =============================================================================
