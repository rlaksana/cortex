{
  "name": "cortex-memory-mcp",
  "version": "2.0.0",
  "description": "Cortex Memory MCP Server - Advanced knowledge management with Qdrant vector database support",
  "main": "dist/index-claude.js",
  "type": "module",
  "bin": {
    "cortex-qdrant": "dist/index-qdrant.js",
    "cortex-claude": "dist/index-claude.js"
  },
  "scripts": {
    "start": "node dist/index-qdrant.js",
    "start:raw": "node dist/index-qdrant.js",
    "dev": "node dist/index-qdrant.js",
    "build": "tsc",
    "build:qdrant": "tsc src/index-qdrant.ts --outDir dist --target es2022 --module esnext --moduleResolution node --esModuleInterop --allowSyntheticDefaultImports --skipLibCheck",
    "lint": "eslint src",
    "lint:fix": "eslint src --fix",
    "lint:quiet": "eslint src --quiet",
    "type-check": "tsc --noEmit",
    "type-check:qdrant": "tsc src/index-qdrant.ts --noEmit",
    "quality-check": "npm run lint && npm run type-check",
    "db:health": "node -e \"import('./dist/index-qdrant.js').then(m => m.databaseManager.healthCheck()).then(healthy => console.log(healthy ? '✅ Qdrant DB healthy' : '❌ Qdrant DB unhealthy')).catch(console.error)\"",
    "db:generate": "echo 'Database schema generation - using Qdrant vector database'",
    "db:push": "echo 'Database schema push - Qdrant does not require schema migration'",
    "test:connection": "node -e \"import('./dist/index-qdrant.js').then(m => m.databaseManager.healthCheck()).then(() => console.log('✅ Qdrant connection OK'))).catch(console.error)",
    "test": "vitest run --config vitest.config.ts",
    "test:watch": "vitest --config vitest.config.ts",
    "test:integration": "vitest run --config vitest.integration.config.ts",
    "test:e2e": "vitest run --config vitest.e2e.config.ts",
    "test:coverage": "vitest run --config vitest.coverage.config.ts --coverage",
    "test:coverage:unit": "vitest run --config vitest.config.ts --coverage",
    "test:coverage:integration": "vitest run --config vitest.integration.config.ts --coverage",
    "test:coverage:watch": "vitest --config vitest.coverage.config.ts --coverage --watch",
    "test:coverage:report": "node scripts/generate-coverage-report.js",
    "test:coverage:html": "vitest run --config vitest.coverage.config.ts --coverage --reporter=html",
    "test:coverage:lcov": "vitest run --config vitest.coverage.config.ts --coverage --reporter=lcov",
    "test:coverage:json": "vitest run --config vitest.coverage.config.ts --coverage --reporter=json",
    "test:coverage:summary": "vitest run --config vitest.coverage.config.ts --coverage --reporter=text-summary",
    "test:coverage:ci": "vitest run --config vitest.coverage.config.ts --coverage --reporter=json --reporter=text --reporter=junit",
    "test:coverage:check": "vitest run --config vitest.coverage.config.ts --coverage --run",
    "test:coverage:threshold": "vitest run --config vitest.coverage.config.ts --coverage --coverage.thresholds.autoUpdate=true",
    "test:coverage:merge": "node scripts/merge-coverage-reports.js",
    "test:coverage:upload": "node scripts/upload-coverage-reports.js",
    "test:coverage:badge": "node scripts/generate-coverage-badge.js",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e",
    "test:ci": "npm run test:coverage:ci && npm run test:coverage:check",
    "test:performance": "vitest run --config vitest.config.ts tests/performance",
    "test:performance:load": "vitest run --config vitest.config.ts tests/performance/load-testing.test.ts",
    "test:performance:memory": "vitest run --config vitest.config.ts tests/performance/memory-profiling.test.ts",
    "test:performance:concurrent": "vitest run --config vitest.config.ts tests/performance/concurrent-users.test.ts",
    "test:performance:stress": "vitest run --config vitest.config.ts tests/performance/stress-testing.test.ts",
    "test:performance:latency": "vitest run --config vitest.config.ts tests/performance/latency-testing.test.ts",
    "test:performance:database": "vitest run --config vitest.config.ts tests/performance/database-performance.test.ts",
    "test:performance:search": "vitest run --config vitest.config.ts tests/performance/search-performance.test.ts",
    "test:performance:all": "npm run test:performance && npm run test:performance:load && npm run test:performance:memory && npm run test:performance:concurrent && npm run test:performance:stress && npm run test:performance:latency && npm run test:performance:database && npm run test:performance:search"
  },
  "keywords": [
    "mcp",
    "memory",
    "knowledge-management",
    "autonomous-decision",
    "qdrant",
    "vector-database",
    "semantic-search",
    "embeddings"
  ],
  "author": "Cortex Team",
  "license": "MIT",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.20.2",
    "@qdrant/js-client-rest": "^1.13.0",
    "bcryptjs": "^3.0.2",
    "crypto": "^1.0.1",
    "dotenv": "^17.2.3",
    "jsonwebtoken": "^9.0.2",
    "node-fetch": "^3.3.2",
    "openai": "^4.104.0",
    "pg": "^8.16.3",
    "pino": "^10.1.0",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@rollup/rollup-win32-x64-msvc": "^4.52.5",
    "@types/bcryptjs": "^2.4.6",
    "@types/express": "^5.0.3",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^24.9.1",
    "@typescript-eslint/eslint-plugin": "^8.46.1",
    "@typescript-eslint/parser": "^8.46.1",
    "@vitest/coverage-v8": "^4.0.3",
    "eslint": "^9.38.0",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-security": "^3.0.1",
    "glob": "^11.0.3",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.3",
    "typescript-eslint": "^8.46.1",
    "vitest": "^4.0.3"
  },
  "engines": {
    "node": ">=20.0.0"
  }
}
