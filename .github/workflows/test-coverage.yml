name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run coverage reports daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      coverage_type:
        description: 'Type of coverage to run'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - unit
          - integration
          - critical-path-only

env:
  NODE_VERSION: '20'
  COVERAGE_ENABLED: true
  COVERAGE_DIR: coverage
  COVERAGE_REPORTS_DIR: coverage/reports

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      coverage-type: ${{ steps.setup.outputs.coverage-type }}
      should-run-full: ${{ steps.setup.outputs.should-run-full }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

    - name: Setup test environment
        run: cp .env.ci .env

      - name: Determine coverage type
        id: setup
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "coverage-type=comprehensive" >> $GITHUB_OUTPUT
            echo "should-run-full=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "coverage-type=changed" >> $GITHUB_OUTPUT
            echo "should-run-full=false" >> $GITHUB_OUTPUT
          elif [[ -n "${{ github.event.inputs.coverage_type }}" ]]; then
            echo "coverage-type=${{ github.event.inputs.coverage_type }}" >> $GITHUB_OUTPUT
            echo "should-run-full=true" >> $GITHUB_OUTPUT
          else
            echo "coverage-type=unit" >> $GITHUB_OUTPUT
            echo "should-run-full=false" >> $GITHUB_OUTPUT
          fi

  unit-coverage:
    name: Unit Test Coverage
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.coverage-type == 'comprehensive' || needs.setup.outputs.coverage-type == 'unit'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

    - name: Setup test environment
        run: cp .env.ci .env

      - name: Run unit tests with coverage
        run: npm run test:coverage:unit
        continue-on-error: true

      - name: Upload unit coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: |
            coverage/
            test-results/
          retention-days: 30

  integration-coverage:
    name: Integration Test Coverage
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.coverage-type == 'comprehensive' || needs.setup.outputs.coverage-type == 'integration'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: cortex_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

    - name: Setup test environment
        run: cp .env.ci .env

      - name: Setup test database
        run: |
          npm run db:generate
          npm run db:push -- --accept-data-loss
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cortex_test

      - name: Run integration tests with coverage
        run: npm run test:coverage:integration
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cortex_test

      - name: Upload integration coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: |
            coverage/
            test-results/
          retention-days: 30

  comprehensive-coverage:
    name: Comprehensive Coverage
    runs-on: ubuntu-latest
    needs: [setup, unit-coverage, integration-coverage]
    if: needs.setup.outputs.should-run-full == 'true'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: cortex_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

    - name: Setup test environment
        run: cp .env.ci .env

      - name: Download previous coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-coverage"
          merge-multiple: true

      - name: Setup test database
        run: |
          npm run db:generate
          npm run db:push -- --accept-data-loss
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cortex_test

      - name: Run comprehensive coverage
        run: npm run test:coverage:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cortex_test

      - name: Generate coverage report
        run: npm run test:coverage:report

      - name: Generate coverage badge
        run: npm run test:coverage:badge

      - name: Check coverage thresholds
        run: npm run test:coverage:check
        continue-on-error: true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-coverage
          path: |
            coverage/
            test-results/
          retention-days: 90

  quality-gates:
    name: Coverage Quality Gates
    runs-on: ubuntu-latest
    needs: [setup, comprehensive-coverage]
    if: always() && (needs.setup.outputs.should-run-full == 'true' || needs.comprehensive-coverage.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

    - name: Setup test environment
        run: cp .env.ci .env

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-coverage

      - name: Install dependencies for quality gates
      run: |
        sudo apt-get update
        sudo apt-get install -y bc jq

    - name: Evaluate quality gates
        id: quality-gates
        run: |
          echo "Evaluating coverage quality gates..."

          # Check if coverage files exist
          if [[ ! -f "coverage/coverage-summary.json" ]]; then
            echo "coverage-status=failed" >> $GITHUB_OUTPUT
            echo "error-message=Coverage summary file not found" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Extract coverage percentages
          LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          FUNCTIONS=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
          BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
          STATEMENTS=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)

          echo "Coverage Metrics:"
          echo "  Lines: $LINES%"
          echo "  Functions: $FUNCTIONS%"
          echo "  Branches: $BRANCHES%"
          echo "  Statements: $STATEMENTS%"

          # Check thresholds
          PASSED=true
          ERROR_MESSAGE=""

          if (( $(echo "$LINES < 95" | bc -l) )); then
            PASSED=false
            ERROR_MESSAGE="$ERROR_MESSAGE Lines coverage below 95% ($LINES%); "
          fi

          if (( $(echo "$FUNCTIONS < 95" | bc -l) )); then
            PASSED=false
            ERROR_MESSAGE="$ERROR_MESSAGE Functions coverage below 95% ($FUNCTIONS%); "
          fi

          if (( $(echo "$BRANCHES < 90" | bc -l) )); then
            PASSED=false
            ERROR_MESSAGE="$ERROR_MESSAGE Branches coverage below 90% ($BRANCHES%); "
          fi

          if (( $(echo "$STATEMENTS < 95" | bc -l) )); then
            PASSED=false
            ERROR_MESSAGE="$ERROR_MESSAGE Statements coverage below 95% ($STATEMENTS%); "
          fi

          if [[ "$PASSED" == "true" ]]; then
            echo "coverage-status=passed" >> $GITHUB_OUTPUT
            echo "coverage-message=All coverage thresholds met" >> $GITHUB_OUTPUT
          else
            echo "coverage-status=failed" >> $GITHUB_OUTPUT
            echo "error-message=$ERROR_MESSAGE" >> $GITHUB_OUTPUT
          fi

      - name: Quality gate status
        run: |
          if [[ "${{ steps.quality-gates.outputs.coverage-status }}" == "passed" ]]; then
            echo "✅ All quality gates passed"
            echo "📊 Coverage metrics meet thresholds"
          else
            echo "❌ Quality gates failed"
            echo "📉 ${{ steps.quality-gates.outputs.error-message }}"
            exit 1
          fi

  coverage-reporting:
    name: Coverage Reporting
    runs-on: ubuntu-latest
    needs: [setup, comprehensive-coverage, quality-gates]
    if: always() && (needs.comprehensive-coverage.result == 'success' || needs.quality-gates.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

    - name: Setup test environment
        run: cp .env.ci .env

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-coverage

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info,./coverage/coverage.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage
          destination_dir: coverage

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## 📊 Coverage Report\n\n';

            try {
              const coverageSummary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverageSummary.total;

              comment += '| Metric | Coverage | Target | Status |\n';
              comment += '|--------|----------|--------|--------|\n';
              comment += `| Lines | ${total.lines.pct}% | 95% | ${total.lines.pct >= 95 ? '✅' : '❌'} |\n`;
              comment += `| Functions | ${total.functions.pct}% | 95% | ${total.functions.pct >= 95 ? '✅' : '❌'} |\n`;
              comment += `| Branches | ${total.branches.pct}% | 90% | ${total.branches.pct >= 90 ? '✅' : '❌'} |\n`;
              comment += `| Statements | ${total.statements.pct}% | 95% | ${total.statements.pct >= 95 ? '✅' : '❌'} |\n\n`;

              const overallCoverage = Math.round((total.lines.pct + total.functions.pct + total.statements.pct) / 3);
              comment += `**Overall Coverage: ${overallCoverage}%**\n\n`;

              if (overallCoverage >= 95) {
                comment += '🎉 Excellent coverage! All thresholds met.\n';
              } else if (overallCoverage >= 90) {
                comment += '✅ Good coverage, but there\'s room for improvement.\n';
              } else {
                comment += '⚠️ Coverage needs improvement. Please add more tests.\n';
              }

              // Add link to detailed report
              comment += '\n📈 [Detailed Coverage Report](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.number }})';

            } catch (error) {
              comment += '❌ Could not generate coverage summary.\n';
              comment += `Error: ${error.message}\n`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  coverage-metrics:
    name: Coverage Metrics Summary
    runs-on: ubuntu-latest
    needs: [setup, comprehensive-coverage, quality-gates]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies for metrics
      run: |
        sudo apt-get update
        sudo apt-get install -y bc jq

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-coverage

      - name: Extract and display metrics
        id: metrics
        run: |
          if [[ -f "coverage/coverage-summary.json" ]]; then
            LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)

            echo "lines-coverage=$LINES" >> $GITHUB_OUTPUT
            echo "functions-coverage=$FUNCTIONS" >> $GITHUB_OUTPUT
            echo "branches-coverage=$BRANCHES" >> $GITHUB_OUTPUT
            echo "statements-coverage=$STATEMENTS" >> $GITHUB_OUTPUT

            # Calculate overall coverage
            OVERALL=$(echo "scale=2; ($LINES + $FUNCTIONS + $STATEMENTS) / 3" | bc)
            echo "overall-coverage=$OVERALL" >> $GITHUB_OUTPUT

            echo "## Coverage Metrics Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | $LINES% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | $FUNCTIONS% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | $BRANCHES% |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | $STATEMENTS% |" >> $GITHUB_STEP_SUMMARY
            echo "| **Overall** | **$OVERALL%** |" >> $GITHUB_STEP_SUMMARY
          else
            echo "No coverage data available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          COVERAGE="${{ steps.metrics.outputs.overall-coverage }}"
          if [[ -n "$COVERAGE" ]]; then
            echo "Coverage: $COVERAGE%"
            # Badge logic could be added here
          fi

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [unit-coverage, integration-coverage, comprehensive-coverage, coverage-reporting]
    if: always()

    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const created = new Date(artifact.created_at);
              const daysOld = (Date.now() - created) / (1000 * 60 * 60 * 24);
              return daysOld > 30;
            });

            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }