# ============================================================================
# CORTEX MEMORY MCP - DUAL DATABASE ARCHITECTURE (PostgreSQL 18 + Qdrant)
# ============================================================================
# ARCHITECTURE: Local Node.js MCP Server + Docker PostgreSQL + Qdrant
# - Local Node.js connects to PostgreSQL on localhost:5433 for structured data
# - Local Node.js connects to Qdrant on localhost:6333 for vector search
# - PostgreSQL 18 handles traditional knowledge types (entities, relations, etc.)
# - Qdrant handles vector embeddings and semantic search
# - Both databases are synchronized through the unified database layer
#
# ‚ö†Ô∏è DOCKER COMPOSE CONFIGURATION RESTRICTIONS ‚ö†Ô∏è
# üî¥ FORBIDDEN: Do NOT change any configuration without explicit approval:
services:
  # PostgreSQL 18 - Structured Knowledge Storage
  # Qdrant Vector Database - Semantic Search & Embeddings
  qdrant:
    image: qdrant/qdrant:v1.13.2
    container_name: cortex-qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__MAX_REQUEST_SIZE_MB: 256
      QDRANT__SERVICE__CORS__ALLOW_ORIGIN: "*"
      QDRANT__SERVICE__CORS__ALLOW_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
      QDRANT__SERVICE__CORS__ALLOW_HEADERS: "*"
      QDRANT__LOG_LEVEL: INFO
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS: 4
      QDRANT__STORAGE__PERFORMANCE__MAX_INDEXING_THREADS: 4
      QDRANT__SERVICE__TELEMETRY_DISABLED: true
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - cortex_qdrant_data:/qdrant/storage
      - ./backups/qdrant:/backups
      - ./config/qdrant:/qdrant/config
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:6333/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - cortex_network
    restart: unless-stopped
    # Resource limits for vector operations
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis - Cache & Session Storage
  redis:
    image: redis:7-alpine
    container_name: cortex-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - cortex_redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - cortex_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx - Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cortex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: cortex-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
      - ./logs/prometheus:/var/log/prometheus
    networks:
      - cortex_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: cortex-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: cortex_grafana_2025
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - cortex_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Vector - Log Aggregation
  vector:
    image: timberio/vector:0.32.0-alpine
    container_name: cortex-vector
    command: ["--config", "/etc/vector/vector.toml", "--watch-config"]
    volumes:
      - ./config/vector/vector.toml:/etc/vector/vector.toml
      - ./logs:/var/log/app
      - vector_data:/var/lib/vector
    depends_on:
      - postgres
      - qdrant
    networks:
      - cortex_network
    restart: unless-stopped
    profiles:
      - logging

volumes:
  # PostgreSQL data with backup strategy
  cortex_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres

  # Qdrant vector data with backup strategy
  cortex_qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/qdrant

  # Redis cache data
  cortex_redis_data:
    driver: local

  # Monitoring data
  prometheus_data:
    driver: local

  grafana_data:
    driver: local

  # Log aggregation data
  vector_data:
    driver: local

networks:
  cortex_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "cortex.network=dual-database"