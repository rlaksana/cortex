# =============================================================================
# CORTEX MEMORY MCP - DOCKER DESKTOP QDRANT DEPLOYMENT
# =============================================================================
# ARCHITECTURE: Windows MCP Server + Docker Desktop Qdrant Vector Database
# - MCP Server runs natively on Windows (optimal performance)
# - Qdrant runs in Docker Desktop container (GUI management)
# - Connection: Windows host → Docker Desktop → Qdrant
# - Memory usage: 1-2GB total (much lower than PostgreSQL)
# - Performance: 2-5ms latency for vector operations

version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: cortex-qdrant-desktop
    restart: unless-stopped

    ports:
      # Expose to Windows host (localhost:6333)
      - "6333:6333"
      - "6334:6334"

    environment:
      # Qdrant Configuration (Docker Desktop Optimized)
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=4
      - QDRANT__STORAGE__PERFORMANCE__WEIGHTED_SEARCH_THREAD_POOL_SIZE=2
      - QDRANT__SERVICE__MAX_REQUEST_SIZE_MB= 512

    volumes:
      # Qdrant Data Volume
      - qdrant_data:/qdrant/storage

    restart: unless-stopped

    # Health Checks (Docker Desktop Optimized)
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

    # Resource Limits (Docker Desktop Optimized)
    deploy:
      resources:
        limits:
          memory: 1G          # Conservative limit for Qdrant
          cpus: '2'           # CPU limit for Docker Desktop
        reservations:
          memory: 512M        # Memory reservation
          cpus: '1'           # CPU reservation

    # Docker Desktop Specific Optimizations
    read_only: false
    stdin_open: true
    tty: true

    # Networking
    networks:
      - cortex_network

    # Logging (Docker Desktop Optimized)
    logging:
      driver: "json-file"
      options:
        max-size: "50m"        # Larger logs for Docker Desktop
        max-file: "5"          # More log files
        labels: "cortex,qdrant,docker-desktop"

    # Security
    security_opt:
      - no-new-privileges:true

    # Environment Labels
    labels:
      - "cortex.component=database"
      - "cortex.environment=docker-desktop"
      - "cortex.version=1.0.0"
      - "deployment.type=docker-desktop"
      - "cortex.database=qdrant"

  # Optional: Portainer for Docker Management (Docker Desktop)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: cortex-portainer-desktop
    command: --host unix:///var/run/docker.sock
    ports:
      - "9443:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data

    restart: unless-stopped

    # Resource Limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

    # Labels
    labels:
      - "cortex.component=management"
      - "cortex.environment=docker-desktop"
      - "cortex.optional=true"

# Docker Networks
networks:
  cortex_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    labels:
      - "cortex.network=docker-desktop"

# Docker Volumes
volumes:
  qdrant_data:
    driver: local
    labels:
      - "cortex.volume=database"
      - "cortex.environment=docker-desktop"
      - "cortex.database=qdrant"

  portainer_data:
    driver: local
    labels:
      - "cortex.volume=management"
      - "cortex.environment=docker-desktop"