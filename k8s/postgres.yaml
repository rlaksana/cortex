# ============================================================================
# KUBERNETES POSTGRESQL 18 DEPLOYMENT
# ============================================================================

---
# PostgreSQL ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: cortex-mcp
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: cortex-memory
data:
  postgres.conf: |
    # PostgreSQL 18 Performance Configuration
    listen_addresses = '*'
    port = 5432
    max_connections = 200

    # Memory settings
    shared_buffers = 1GB
    effective_cache_size = 3GB
    work_mem = 4MB
    maintenance_work_mem = 256MB
    max_stack_depth = 2MB

    # WAL settings
    wal_level = replica
    max_wal_size = 4GB
    min_wal_size = 1GB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB

    # Query planning
    random_page_cost = 1.1
    effective_io_concurrency = 200

    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_min_messages = warning
    log_min_error_statement = error
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_duration = on
    log_statement = 'ddl'

    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min

    # Extensions
    shared_preload_libraries = 'pg_stat_statements,auto_explain'

  pg_hba.conf: |
    # PostgreSQL 18 Host-Based Authentication
    # TYPE  DATABASE        USER            ADDRESS                 METHOD

    # Local connections
    local   all             postgres                                trust
    local   all             cortex                                  trust

    # IPv4 local connections:
    host    all             cortex          127.0.0.1/32            md5
    host    all             cortex          10.0.0.0/8              md5
    host    all             cortex          172.16.0.0/12           md5
    host    all             cortex          192.168.0.0/16          md5

    # Kubernetes pod connections
    host    all             cortex          0.0.0.0/0               md5

    # IPv6 local connections:
    host    all             all             ::1/128                 md5

    # Allow replication connections from localhost
    host    replication     all             127.0.0.1/32            md5

  init-extensions.sql: |
    -- Initialize PostgreSQL 18 extensions for Cortex Memory MCP
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "btree_gist";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "unaccent";

    -- Enable full-text search
    CREATE TEXT SEARCH CONFIGURATION english (COPY = english);

    -- Create indexes for performance
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_section_search_vector
    ON "Section" USING gin(to_tsvector('english', COALESCE(title, '') || ' ' || COALESCE(content, '') || ' ' || COALESCE(heading, '')));

---
# PostgreSQL PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: cortex-mcp
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: cortex-memory
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi
  volumeMode: Filesystem

---
# PostgreSQL Secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: cortex-mcp
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: cortex-memory
type: Opaque
data:
  POSTGRES_DB: Y29ydGV4X3Byb2Q=  # cortex_prod
  POSTGRES_USER: Y29ydGV4         # cortex
  POSTGRES_PASSWORD: Y29ydGV4X3BnMThfc2VjdXJlXzIwMjVfa2V5  # cortex_pg18_secure_2025_key
  POSTGRES_REPLICATION_PASSWORD: cmVwX2NvcnRleF9wZzE4X3JlcF8yMDI1  # rep_cortex_pg18_rep_2025

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: cortex-mcp
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: cortex-memory
    app.kubernetes.io/version: "18"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
      app.kubernetes.io/part-of: cortex-memory
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: cortex-memory
        app.kubernetes.io/version: "18"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:18-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_REPLICATION_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=en_US.UTF-8"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgres.conf
        - name: postgres-config
          mountPath: /var/lib/postgresql/18/data/pg_hba.conf
          subPath: pg_hba.conf
        - name: postgres-config
          mountPath: /docker-entrypoint-initdb.d/init-extensions.sql
          subPath: init-extensions.sql
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "pg_ctl -D /var/lib/postgresql/data/pgdata -m fast -w stop"
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.13.2
        env:
        - name: DATA_SOURCE_URI
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: DATA_SOURCE_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: DATA_SOURCE_PASS
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
      terminationGracePeriodSeconds: 300
      restartPolicy: Always

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: cortex-mcp
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: cortex-memory
    app.kubernetes.io/service-type: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: cortex-memory

---
# PostgreSQL ServiceMonitor (for Prometheus)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres-metrics
  namespace: cortex-mcp
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: cortex-memory
    app.kubernetes.io/monitored-by: prometheus
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
      app.kubernetes.io/part-of: cortex-memory
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics